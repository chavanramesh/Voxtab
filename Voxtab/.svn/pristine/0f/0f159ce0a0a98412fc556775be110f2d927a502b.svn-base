package com.voxtab.ariatech.voxtab;


import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ExpandableListView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.voxtab.ariatech.voxtab.adapter.ExpandableAdapter;
import com.voxtab.ariatech.voxtab.bean.OrderDetails;
import com.voxtab.ariatech.voxtab.bean.OrderHistoryChild;
import com.voxtab.ariatech.voxtab.bean.OrderHistoryGroup;
import com.voxtab.ariatech.voxtab.database.DatabaseHandlerNew;
import com.voxtab.ariatech.voxtab.globaldata.GlobalData;
import com.voxtab.ariatech.voxtab.globaldata.WebServiceMySQl;
import com.voxtab.ariatech.voxtab.globaldata.WebServiceResonse;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

public class OrderHistoryActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {

    private List<OrderHistoryGroup> catList;
    private List<List<OrderHistoryGroup>> listparts;
    private LinearLayout page_numbers;
    private Toolbar toolbar;
    private Context context;
    private ProgressBar progress_bar_new;

    private GetOrderListWeberviceCall ws_obj = null;
    TextView lbl_view_details, lbl_download_transcription, btn_prev, btn_next;
    ExpandableListView exList;
    HashMap<String, Integer> hashMap = new HashMap<>();
    int selectedIndex = 0;
    Button btn_back;
//    TextView txt_num1, txt_num2, txt_num3, txt_num4, txt_num5;


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_order_history);
        context = this;
        toolbar = GlobalData.initToolBarMenu(this, true);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayShowTitleEnabled(false);
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.setDrawerListener(toggle);
        toggle.syncState();
        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        initData();


    }

    private void initData() {

        btn_back = (Button) findViewById(R.id.btn_back);
        btn_back.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                back();
            }
        });
        lbl_view_details = (TextView) findViewById(R.id.lbl_view_details);
        lbl_download_transcription = (TextView) findViewById(R.id.lbl_download_transcription);
        btn_prev = (TextView) findViewById(R.id.btn_prev);
        btn_next = (TextView) findViewById(R.id.btn_next);
        page_numbers = (LinearLayout) findViewById(R.id.page_numbers);
        exList = (ExpandableListView) findViewById(R.id.lst_orders);
        progress_bar_new = (ProgressBar) findViewById(R.id.progress_bar_new);
//        txt_num1 = (TextView) findViewById(R.id.btn_num1);
//        txt_num2 = (TextView) findViewById(R.id.btn_num2);
//        txt_num3 = (TextView) findViewById(R.id.btn_num3);
//        txt_num4 = (TextView) findViewById(R.id.btn_num4);
//        txt_num5 = (TextView) findViewById(R.id.btn_num5);
        try {
            progress_bar_new.setVisibility(View.VISIBLE);
            ws_obj = new GetOrderListWeberviceCall();
            ws_obj.execute();

        } catch (Exception e) {
            GlobalData.printError(e);
        }


    }

    private <T> List<List<T>> chooped(List<T> list, final int L) {
        List<List<T>> parts = new ArrayList<List<T>>();
        int N = list.size();
        for (int i = 0; i < N; i += L) {
            parts.add(new ArrayList<T>(list.subList(i, Math.min(N, i + L))));
        }
        return parts;
    }

    private void prev_order() {
        if (selectedIndex > 0) {


            exList.setIndicatorBounds(5, 5);
            ExpandableAdapter exAdpt = new ExpandableAdapter(listparts.get((selectedIndex - 1)), this);
            exList.setIndicatorBounds(0, 20);
            exList.setAdapter(exAdpt);

            selectedIndex = selectedIndex - 1;

            if (selectedIndex == 0) {
                btn_prev.setVisibility(View.GONE);
//                btn_next.setVisibility(View.GONE);
                if (selectedIndex == (listparts.size() - 1)) {
                    btn_next.setVisibility(View.GONE);
                } else {
                    btn_next.setVisibility(View.VISIBLE);
                }
            } else {
                btn_prev.setVisibility(View.VISIBLE);
                if (selectedIndex == (listparts.size() - 1)) {
                    btn_next.setVisibility(View.GONE);
                } else {
                    btn_next.setVisibility(View.VISIBLE);
                }
            }


        }
    }

    private void back() {

        Intent intent = new Intent(OrderHistoryActivity.this, MyRecordingsActivity.class);
        startActivity(intent);
    }

    private void next_order() {
        if (selectedIndex < listparts.size()) {
            exList.setIndicatorBounds(5, 5);
            ExpandableAdapter exAdpt = new ExpandableAdapter(listparts.get((selectedIndex + 1)), this);
            exList.setIndicatorBounds(0, 20);
            exList.setAdapter(exAdpt);

            selectedIndex = selectedIndex + 1;

            if (selectedIndex == 0) {
                btn_prev.setVisibility(View.GONE);
//                btn_next.setVisibility(View.GONE);
                if (selectedIndex == (listparts.size() - 1)) {
                    btn_next.setVisibility(View.GONE);
                } else {
                    btn_next.setVisibility(View.VISIBLE);
                }
            } else {
                btn_prev.setVisibility(View.VISIBLE);
                if (selectedIndex == (listparts.size() - 1)) {
                    btn_next.setVisibility(View.GONE);
                } else {
                    btn_next.setVisibility(View.VISIBLE);
                }
            }
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_notifications) {
            // Handle the camera action
        } else if (id == R.id.nav_notifications) {

        } else if (id == R.id.nav_recordings) {
            Intent intent = new Intent(OrderHistoryActivity.this, MyRecordingsActivity.class);
            startActivity(intent);

        }/*else if (id == R.id.nav_order_history) {


        }*/ else if (id == R.id.nav_settings) {

        } else if (id == R.id.nav_home) {
            Intent intent = new Intent(OrderHistoryActivity.this, HomeActivity.class);
            startActivity(intent);
            finish();

        } else if (id == R.id.nav_help) {


        } else if (id == R.id.nav_confidentiality) {

        } else if (id == R.id.nav_terms_condition) {

        } else if (id == R.id.nav_about_us) {

        } /*else if (id == R.id.nav_logout) {
            //logOut();

        }*/ else if (id == R.id.nav_feedback) {

        }


        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    private OrderHistoryGroup createCategory(String assignment_num, String status_title, String order_status_icon, long id) {
        return new OrderHistoryGroup(id, assignment_num, status_title, order_status_icon);
    }


    private List<OrderHistoryChild> createItems(String img_order_status, String txt_status_title, String txt_status_detail, String txt_order_date, String img_upload_status, String txt_upload_status_title, String txt_upload_date, String img_delivered_status, String txt_delivered_status_title, String txt_delivered_status_details, String txt_delivery_date, int num) {
        List<OrderHistoryChild> result = new ArrayList<OrderHistoryChild>();

        for (int i = 0; i < num; i++) {
            OrderHistoryChild item = new OrderHistoryChild(i, " ", txt_status_title, txt_status_detail, txt_order_date, " ", txt_upload_status_title, txt_upload_date, " ", txt_delivered_status_title, txt_delivered_status_details, txt_delivery_date);
//            OrderHistoryChild item = new OrderHistoryChild(i, " ", "Order Placed", "order is placed", "23Mar 2016", " ", "Uploaded", "23Mar 2016", " ", "Delivered", "order is delivered", "23Mar 2016");
            result.add(item);
        }
        return result;
    }


    // GEt Order List
    class GetOrderListWeberviceCall extends AsyncTask<String, WebServiceResonse, WebServiceResonse> {


        int orderId = 0;

        WebServiceMySQl webServiceMySQl = new WebServiceMySQl(context);
        WebServiceResonse resonse = new WebServiceResonse();

        // Set Data

        @Override
        protected WebServiceResonse doInBackground(String... params) {

            try {

                resonse = webServiceMySQl.GetOrderList(0, 50);


            } catch (Exception e) {
                GlobalData.printError(e);
            }

            return resonse;
        }

        @Override
        protected void onPostExecute(WebServiceResonse res) {
            super.onPostExecute(res);

            ws_obj = null;

            try {

                if (res.getStatus() == 200) {

                    JSONArray array = new JSONArray();

                    try {

                        array = res.getJsonObject().getJSONArray("orderlist");

                    } catch (Exception e) {
                        GlobalData.printError(e);
                    }

                    if (array.length() > 0) {
                        setOrderList(array);
                    }


                } else {

                    GlobalData.showSnackBar(btn_back, res.getMessage(), true);
                }


            } catch (Exception e) {
                GlobalData.printError(e);
            }
        }
    }


    public void setOrderList(JSONArray array) {


        LinkedList<OrderDetails> list = new LinkedList<>();

        try {

            for (int i = 0; i < array.length(); i++) {
                try {

                    JSONObject obj = array.getJSONObject(i);

                    OrderDetails orderDetails = new OrderDetails();
                    orderDetails.parseJSON(obj);
                    list.add(orderDetails);
                } catch (Exception e) {
                    GlobalData.printError(e);
                }
            }


            if (list.size() > 0) {

                DatabaseHandlerNew db = new DatabaseHandlerNew(context);
                try {
                    db.open();
                    db.addOrderDetailsListForHistory(list);


                } catch (Exception e) {
                    GlobalData.printError(e);
                } finally {
                    db.close();
                }

            }

            try {
                DatabaseHandlerNew databaseHandler = new DatabaseHandlerNew(context);
                databaseHandler.open();
                LinkedList<OrderDetails> recLinkedList = databaseHandler.getOrderDetails();
                catList = new ArrayList<OrderHistoryGroup>();
                for (int i = 0; i < recLinkedList.size(); i++) {

                    OrderHistoryGroup cat = createCategory(recLinkedList.get(i).getAssignment_no(), recLinkedList.get(i).getOrder_status_id(), "", 1);
                    cat.setItemList(createItems("", recLinkedList.get(i).getOrder_status_id(), recLinkedList.get(i).getOrder_complete_details(), recLinkedList.get(i).getDelivery_date(), " ", recLinkedList.get(i).getOrder_placed_details(), recLinkedList.get(i).getOrder_date(), " ", recLinkedList.get(i).getOrder_complete_details(), "  ", " ", 1));
                    catList.add(cat);
                }
                setData();
            } catch (Exception e) {
                GlobalData.printError(e);
            }

            // Display Order List to list View As per database Entry

        } catch (Exception e) {
            GlobalData.printError(e);
        }


    }


    public void setData() {

        listparts = new ArrayList<>();
        listparts = chooped(catList, 4);
        btn_next.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                next_order();

            }
        });


        btn_prev.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                prev_order();

            }
        });

        if (listparts.size() > 0 && listparts.size() < 1) {
            btn_next.setVisibility(View.GONE);
            btn_prev.setVisibility(View.GONE);
        }

        for (int i = 0; i < listparts.size(); i++) {
            final TextView textView = new TextView(context);
            int txtNo = 1 + i;
            int paddingPixel = 4;
            float density = context.getResources().getDisplayMetrics().density;
            final int paddingDp = (int) (paddingPixel * density);
            textView.setPadding(paddingDp, paddingDp, paddingDp, paddingDp);
            textView.setText(txtNo + "");

            textView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {

                    if (!view.isSelected()) {

//                        Toast.makeText(context, "text" + textView.getText(), Toast.LENGTH_LONG).show();
                        int no = Integer.parseInt(textView.getText().toString()) - 1;
                        selectedIndex = no;

                        if (selectedIndex == 0) {
                            btn_prev.setVisibility(View.GONE);
//                            btn_next.setVisibility(View.GONE);
                            if (selectedIndex == (listparts.size() - 1)) {
                                btn_next.setVisibility(View.GONE);

                            } else {
                                btn_next.setVisibility(View.VISIBLE);
                            }
                        } else {
                            btn_prev.setVisibility(View.VISIBLE);
                            if (selectedIndex == (listparts.size() - 1)) {
                                btn_next.setVisibility(View.GONE);
                            } else {
                                btn_next.setVisibility(View.VISIBLE);
                            }
                        }
                        exList.setIndicatorBounds(5, 5);
                        ExpandableAdapter exAdpt = new ExpandableAdapter(listparts.get(no), context);
                        exList.setIndicatorBounds(0, 20);
                        exList.setAdapter(exAdpt);

                    }
                }
            });

            page_numbers.addView(textView);
        }


        btn_prev.setVisibility(View.GONE);
        if (listparts.size() > 1) {
            btn_next.setVisibility(View.VISIBLE);
        } else {
            btn_next.setVisibility(View.GONE);
        }
        exList.setIndicatorBounds(5, 5);
        ExpandableAdapter exAdpt = new ExpandableAdapter(listparts.get(0), this);
        exList.setIndicatorBounds(0, 20);
        exList.setAdapter(exAdpt);

        progress_bar_new.setVisibility(View.GONE);
    }

}
