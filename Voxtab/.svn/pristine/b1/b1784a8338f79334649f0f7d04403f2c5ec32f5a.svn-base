package com.voxtab.ariatech.voxtab.globaldata;

import android.app.Activity;
import android.content.ContentUris;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.preference.PreferenceManager;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.support.design.widget.Snackbar;
import android.support.v4.content.PermissionChecker;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.TypedValue;
import android.view.Display;
import android.view.View;
import android.view.WindowManager;

import com.ariatech.lib_project.CommonUtil;
import com.google.gson.Gson;
import com.voxtab.ariatech.voxtab.R;
import com.voxtab.ariatech.voxtab.bean.ChangePrice;
import com.voxtab.ariatech.voxtab.bean.Free_services;
import com.voxtab.ariatech.voxtab.bean.MyRecording;
import com.voxtab.ariatech.voxtab.bean.OrderDetails;
import com.voxtab.ariatech.voxtab.bean.Service_type;
import com.voxtab.ariatech.voxtab.bean.TimeStamb;
import com.voxtab.ariatech.voxtab.bean.Transcription_type;
import com.voxtab.ariatech.voxtab.bean.Users;
import com.voxtab.ariatech.voxtab.bean.Vas;
import com.voxtab.ariatech.voxtab.database.DatabaseHandler;
import com.voxtab.ariatech.voxtab.database.DatabaseHandlerNew;

import org.json.JSONObject;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLConnection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;

public class GlobalData {

    public static final String baseURL ="http://voxtab.atechmobility.com/";
    public static final String URL = baseURL+ "/VoxTabServices.svc/";

    public static final String SERVICE_REGISTER_DEVICE = "registerDeviceId";
    public static final String SERVICE_FORGOT_PASSWORD = "forgotProviderPassword";
    public static final String SERVICE_CHANGE_PASSWORD = "changeProviderPassword";
    public static final String MESSAGE_CHANGE_PASSWORD = "Password changed succesfully";
    public static final String MESSAGE_CHANGE_PASSWORD_FAILED = "Incorrect Password";

    public static final String ERR_NETWORK_NO_CONNECTION = "Can't connect to the Internet. Please check your mobile data or Wifi connection";
    public static final String ERR_NETWORK_SLOW_OR_NO_CONNECTION = "{ \"status\": \"fail\", \"message\": \"No response from server\"}";

    public static final String ERR_CONNECTION = "No internert connection";

    public static final String SHARE_LEVEL = "SHARE_LEVEL";
    public static final String SHARE_USER_NAME = "SHARE_USER_NAME";

    public static   String USERID="0";
    public static  boolean longpressFlag = false;

    //Stoage Directory
    public static String storageDirectory = "/Voxtab/Audio/";

    public static String permissionRecAudioFlag = "rcord_perm";
    public static String permissionRecStorageFlag = "storage";

    public static LinkedList<OrderDetails> selectedFiles=new LinkedList<>();

    public static Users userSelected= new Users();



    // Webservices
    public static String webSrviceGetMasterData="GetMasterUpdates";
    public static String webSrvicePlaceOrder="PlaceOrder";
    public static String webSrviceGetOrderList="GetOrderList";
    public static String webSrviceLogin="login";
    public static String webSrviceUpdateorder="updateorder";






    public static String free_services_accent = "", free_services_terminology = "", free_services_timestamp = "", free_services_identification = "", free_services_type = "";


    public static ArrayList<String> name=new ArrayList<>();
    public static ArrayList<String> type=new ArrayList<>();
    public static ArrayList<String> duration=new ArrayList<>();
    public static ArrayList<String> services=new ArrayList<>();
    public static String service_type_name="", transcription_type_name="", timestamp_duration_name="", valueadded_name="";

    public static int service_type_id, transcription_type_id, timestamp_duration_id, valueadded_id;


    public static ArrayList<ChangePrice> change_price_arraylist=new ArrayList<>();
    public static ArrayList<Service_type> serviceTypes=new ArrayList<>();
    public static ArrayList<Transcription_type> transcriptionType=new ArrayList<>();
    public static ArrayList<TimeStamb> timestampDuration=new ArrayList<>();
    public static ArrayList<Vas> valueAddedServices=new ArrayList<>();
    public static ArrayList<Free_services> freeServices=new ArrayList<>();
    public static final String UPLOAD_FILE = baseURL+"/voxtab/uploadmedia.aspx";


    // GCM Variables

    public static String deviceType = "1";
    public static String SERVERAPIKEY = "abcd";
    public static DeviceInfo deviceInfo = null;


    public static void setDeviceInfo(Context context) {
        deviceInfo = new DeviceInfo(context);

//        SharedPreferences settings = PreferenceManager
//                .getDefaultSharedPreferences(context);
//
//        if(settings.getInt("firstTimedevice",0) == 0) {
//
//            deviceInfo = new DeviceInfo(context);
//
//            SharedPreferences.Editor editor1 = settings.edit();
//            editor1.putInt("firstTimedevice", 0);
//
//            editor1.putString("deviceInfo", new Gson().toJson(deviceInfo).toString());
//
//            editor1.commit();
//
//
//
//        }else{
//
//            String obj= settings.getString("deviceInfo", "");
//
//            if(obj.length()>0){
//
//                try {
//                    JSONObject object=new JSONObject(obj);
//
//                    deviceInfo=(DeviceInfo) new Gson().fromJson (obj, DeviceInfo.class);
//
//
//                }catch (Exception e){
//                    GlobalData.printError(e);
//                    deviceInfo = new DeviceInfo(context);
//                }
//            }else{
//                deviceInfo = new DeviceInfo(context);
//            }


//        }

    }




    public static LinkedList<MyRecording> sList=new LinkedList<>();


    // Flags
    public static boolean dataDownloadFlag=false;



    public static String convertSecondsToHMmSsS(long seconds) {
        long s = seconds % 60;
        long m = (seconds / 60) % 60;
        long h = (seconds / (60 * 60)) % 24;
        return String.format("%d Hrs %02d Mins", h, m);
    }

    public static void showSnackBar(View view, String message, boolean flag) {


        if (message.length() > 0) {
            Snackbar.make(view, message, Snackbar.LENGTH_LONG)
                    .setAction("Action", null).show();
        }
    }

    public static void printError(Exception e) {

        e.printStackTrace();
        System.out.println(e);
    }

    public static Toolbar initToolBar(final AppCompatActivity c, String title, boolean showBack) {
        Toolbar toolbar = (Toolbar) c.findViewById(R.id.toolbar);
        if (title != null) {
            toolbar.setTitle(title);
        }
        c.setSupportActionBar(toolbar);

        if (showBack) {
            c.getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            toolbar.setNavigationOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    c.onBackPressed();
                }
            });
        } else {
            c.getSupportActionBar().setDisplayShowHomeEnabled(true);
//            c.getSupportActionBar().setLogo(R.mipmap.ic_launcher);
        }

        c.getSupportActionBar().setHomeButtonEnabled(true);

        return toolbar;
    }


    public static void printMessage(String message) {
        System.out.println(message);
    }

    public static void printError(Exception e, String message) {
        e.printStackTrace();
        System.out.println(message);
    }

    public static void printError(String message, Exception e) {
        e.printStackTrace();
        System.out.println(message);
    }


    public static Toolbar initToolBarMenu(AppCompatActivity c, String title, boolean showBack) {
        Toolbar toolbar = (Toolbar) c.findViewById(R.id.toolbar);
        if (title != null) {
            toolbar.setTitle(title);
        }
        c.setSupportActionBar(toolbar);

        if (showBack) {
            c.getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        } else {
            c.getSupportActionBar().setDisplayShowHomeEnabled(true);
//            c.getSupportActionBar().setLogo(R.drawable.ic_launcher);
        }

        c.getSupportActionBar().setHomeButtonEnabled(true);

        return toolbar;
    }

    public static Toolbar initToolBarMenu(AppCompatActivity c, boolean showBack) {
        Toolbar toolbar = (Toolbar) c.findViewById(R.id.toolbar);
        toolbar.setTitle("");
        toolbar.setSubtitle("");

        c.setSupportActionBar(toolbar);

        if (showBack) {
            c.getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        } else {
            c.getSupportActionBar().setDisplayShowHomeEnabled(true);
        }

        c.getSupportActionBar().setHomeButtonEnabled(true);

        return toolbar;
    }


    public static String getPath(AppCompatActivity app, Uri uri) {
        String[] projection = {MediaStore.Images.Media.DATA};
        Cursor cursor = app.managedQuery(uri, projection, null, null, null);
        if (cursor != null) {
            // HERE YOU WILL GET A NULLPOINTER IF CURSOR IS NULL
            // THIS CAN BE, IF YOU USED OI FILE MANAGER FOR PICKING THE MEDIA
            int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
            cursor.moveToFirst();
            return cursor.getString(column_index);
        } else
            return null;
    }

    public static Bitmap decodeFile(String filePath) {
        // Decode image size
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(filePath, o);

        // The new size we want to scale to
        final int REQUIRED_SIZE = 1024;

        // Find the correct scale value. It should be the power of 2.
        int width_tmp = o.outWidth, height_tmp = o.outHeight;
        int scale = 1;
        while (true) {
            if (width_tmp < REQUIRED_SIZE && height_tmp < REQUIRED_SIZE)
                break;
            width_tmp /= 2;
            height_tmp /= 2;
            scale *= 2;
        }

        // Decode with inSampleSize
        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize = scale;
        return BitmapFactory.decodeFile(filePath, o2);
    }

    public static int getProductDim1(Context context) {
        Display display = ((WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
        int width = display.getWidth();
        int pixels = (int) TypedValue.applyDimension(
                TypedValue.COMPLEX_UNIT_DIP, 4, context.getResources()
                        .getDisplayMetrics());

        return ((width / 2) - pixels);
    }

    public static double getProductDim(double ratio, Context context) {
        Display display = ((WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
        int width = display.getWidth();
        int pixels = (int) TypedValue.applyDimension(
                TypedValue.COMPLEX_UNIT_DIP, 4, context.getResources()
                        .getDisplayMetrics());

        return ((width / ratio) - pixels);
    }

    public static float pxFromDp(final Context context, final float dp) {
        return dp * context.getResources().getDisplayMetrics().density;
    }

    public static String getFileExt(String file) {
        String extension = file.substring(file.lastIndexOf("."));
        return extension.toUpperCase();
    }

    public static int checkFileSizeFromURL(String url) {
        CommonUtil.printMessage(url);
        URLConnection urlConnection = null;
        try {
            java.net.URL myUrl = new java.net.URL(url);
            urlConnection = myUrl.openConnection();

            urlConnection.connect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return urlConnection.getContentLength();
    }


    // save database File
    public static void BackupDatabase(Context context) throws IOException {
        boolean success = true;
        File file = null;
        file = new File(Environment.getExternalStorageDirectory() + "/DB_Backup");

        if (file.exists()) {
            success = true;
        } else {
            success = file.mkdir();
        }

        if (success) {
            String inFileName = "/data/data/" + context.getPackageName() + "/databases/voxtab_new.db";
            File dbFile = new File(inFileName);
            FileInputStream fis = new FileInputStream(dbFile);

            String outFileName = Environment.getExternalStorageDirectory() + "/DB_Backup/voxtab_new.db";

            File outFile = new File(outFileName);
            if (!outFile.exists()) {
                outFile.createNewFile();
            }

            //Open the empty db as the output stream
            OutputStream output = new FileOutputStream(outFileName);
            //transfer bytes from the inputfile to the outputfile
            byte[] buffer = new byte[1024];
            int length;
            while ((length = fis.read(buffer)) > 0) {
                output.write(buffer, 0, length);
            }

            output.flush();
            output.close();
            fis.close();
        }
    }

    public static String getTimeFromMis(int milisec) {


        String dateForButton = "";

        try {
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(milisec);
            SimpleDateFormat fmt = new SimpleDateFormat("HH:mm:ss");
            Date date = cal.getTime();
            SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm a");
            dateForButton = dateFormat.format(date);
        } catch (Exception e) {
            GlobalData.printError(e);
        }
        return dateForButton;
    }

    public static String convertSecondsToHMmSs(long millis) {
//        long s = seconds % 60;
//        long m = (seconds / 60) % 60;
//        long h = (seconds / (60 * 60)) % 24;
//        return String.format("%d:%02d:%02d", h, m, s);


        int s = (int) (millis / 1000) % 60;
        int m = (int) ((millis / (1000 * 60)) % 60);
        int h = (int) ((millis / (1000 * 60 * 60)) % 24);

        return String.format("%d:%02d:%02d", h, m, s);
    }


    //holiday_format_conversion
    public static String getDateFromDMY(int day,int month,int year) {


        String dateString = "";

        try {
            Calendar cal = Calendar.getInstance();

            cal.set(Calendar.DAY_OF_MONTH,day);
            cal.set(Calendar.MONTH,month);
            cal.set(Calendar.YEAR, year);
            Date date = cal.getTime();

          //  06-March-2016
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
            dateString = dateFormat.format(date);
        } catch (Exception e) {
            GlobalData.printError(e);
        }
        return dateString;
    }


    public static String getDateFromDMY(String date) {

        //2016-10-13 00:00:00
        // 12 Dec 2016 11:30am

        String dateString = "";

        try {
            SimpleDateFormat parseFormat = new SimpleDateFormat("dd MMM yyyy hh:mma");

            Date olddate = parseFormat.parse(date);




            Calendar cal = Calendar.getInstance();


            cal.setTime(olddate);




            //  06-March-2016
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss ");

            dateString = dateFormat.format(cal.getTime());


        } catch (Exception e) {
            GlobalData.printError(e);
        }
        return dateString;
    }


    public static String getStanderdDateFormt(Calendar cal) {

        //2016-10-13 00:00:00
        // 12 Dec 2016 11:30am

        String dateString = "";

        try {



            //  06-March-2016
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");

            dateString = dateFormat.format(cal.getTime());


        } catch (Exception e) {
            GlobalData.printError(e);
        }
        return dateString;
    }


    public static boolean selfPermissionGranted(Context context, String permission) {
        // For Android < Android M, self permissions are always granted.
        boolean result = true;

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                // targetSdkVersion >= Android M, we can
                // use Context#checkSelfPermission
                result = context.checkSelfPermission(permission)
                        == PackageManager.PERMISSION_GRANTED;
            } else {
                // targetSdkVersion < Android M, we have to use PermissionChecker
                result = PermissionChecker.checkSelfPermission(context, permission)
                        == PermissionChecker.PERMISSION_GRANTED;
            }
        }

        return result;
    }


    public static ArrayList<Activity> activities = new ArrayList<Activity>();

    public static void finishAll() {
        if (activities.size() > 0) {
            for (Activity activity : activities) {
                try {
                    activity.finish();
                } catch (Exception e) {
                    GlobalData.printError("", e);
                }
                GlobalData.printMessage("Activity=>"
                        + activity.getClass().getName());
            }
        }
    }


    public static int parseSeconds(String h) {
        String[] h1 = h.split(":");

        int hour = Integer.parseInt(h1[0]);
        int minute = Integer.parseInt(h1[1]);
        int second = Integer.parseInt(h1[2]);

        int temp;
        temp = second + (60 * minute) + (3600 * hour);

        System.out.println("secondsss" + temp);
        return temp;
    }

    public static double parseTimeToMinute(String hours) {
        double minutes = 0;
        String[] split = hours.split(":");
        try {
            minutes += Double.parseDouble(split[0]) * 60;
            minutes += Double.parseDouble(split[1]);
            minutes += Double.parseDouble(split[2]) / 60;
            return minutes;
        } catch (Exception e) {
            e.printStackTrace();
            return -1;
        }

    }

    public static String formatHoursAndMinutes(double totalMinutes) {
        String minutes = Double.toString(totalMinutes % 60);
        minutes = minutes.length() == 1 ? "0" + minutes : minutes;
        return (totalMinutes / 60) + ":" + minutes;
    }


    public static boolean checkdates(String cDate, String fDate, String tDate) {

        try {
            SimpleDateFormat parseFormat = new SimpleDateFormat("hh:mm a  dd MMM yyyy");
            Date currentDate = parseFormat.parse(cDate);
            Date fromDate = parseFormat.parse(fDate);
            Date toDate = parseFormat.parse(tDate);





            return currentDate.getTime() >= fromDate.getTime() &&
                    currentDate.getTime() <= toDate.getTime();

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public static String convert24Time(String time) {
        String str = "";
        try {
            SimpleDateFormat displayFormat = new SimpleDateFormat("HH:mm");
            SimpleDateFormat parseFormat = new SimpleDateFormat("hh:mm a");
            Date date = parseFormat.parse(time);
//            System.out.println(parseFormat.format(date) + " = "
//                    + displayFormat.format(date));
            str = displayFormat.format(date);
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        return str;
    }

    public static boolean timesCheck(String someRandomTime, String string1, String string2) {
        try {
            Date time1 = new SimpleDateFormat("HH:mm").parse(string1);
            Calendar calendar1 = Calendar.getInstance();
            calendar1.setTime(time1);

            Date time2 = new SimpleDateFormat("HH:mm").parse(string2);
            Calendar calendar2 = Calendar.getInstance();
            calendar2.setTime(time2);

            // Add 30 Min time to updated revised logic
            calendar2.setTimeInMillis(calendar2.getTimeInMillis()+1800000);

            calendar2.add(Calendar.DATE, 1);

            Date d = new SimpleDateFormat("HH:mm").parse(someRandomTime);
            Calendar calendar3 = Calendar.getInstance();
            calendar3.setTime(d);
            calendar3.add(Calendar.DATE, 1);

            Date x = calendar3.getTime();
            if (x.after(calendar1.getTime()) && x.before(calendar2.getTime())) {
                //checkes whether the current time is between 14:49:00 and 20:11:13.
                return true;
            } else {
                return false;
            }
        } catch (ParseException e) {
            e.printStackTrace();
            return false;
        }
    }

    public static boolean isNetworkAvailable(Context context) {
        boolean haveConnectedWifi = false;
        boolean haveConnectedMobile = false;

        ConnectivityManager cm = (ConnectivityManager) context
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo[] netInfo = cm.getAllNetworkInfo();
        for (NetworkInfo ni : netInfo) {
            if (ni.getTypeName().equalsIgnoreCase("WIFI"))
                if (ni.isConnected())
                    haveConnectedWifi = true;
            if (ni.getTypeName().equalsIgnoreCase("MOBILE"))
                if (ni.isConnected())
                    haveConnectedMobile = true;
        }
        return haveConnectedWifi || haveConnectedMobile;
    }




    public  static  void setFirstTimeDataLoading(Context context){


        SharedPreferences settings = PreferenceManager
                .getDefaultSharedPreferences(context);
        SharedPreferences.Editor editor = settings.edit();
        try {
            editor.putInt("fisrttime",1);

            editor.commit();

        }catch (Exception e){
            printError(e);
        }

    }

    public  static int getFirstTimeDataLoading(Context context){


        SharedPreferences settings = PreferenceManager
                .getDefaultSharedPreferences(context);
        int value =0;
        try {
            value= settings.getInt("fisrttime", 0);


        }catch (Exception e){
            printError(e);
        }

        return value;

    }


    // Set User

    public static void setUserData(Context context){

        DatabaseHandlerNew db=new DatabaseHandlerNew(context);
        userSelected=new Users();
        try {
            db.open();

            userSelected = db.getUsers().get(0);


        }catch (Exception e){
            GlobalData.printError(e);
        }finally {
            db.close();
        }


//        if(userSelected.getUser_id()<=0){
//            userSelected.setUser_id(1);
//        }

        USERID =""+userSelected.getUser_id();



        }

    public static String showdate(String time) {
        String str = "";
        try {
            SimpleDateFormat displayFormat = new SimpleDateFormat("hh:mm a  dd MMM yyyy");
            SimpleDateFormat parseFormat = new SimpleDateFormat("EEE MMM dd H:mm:ss z yyyy");
            Date date = parseFormat.parse(time);
//            System.out.println(parseFormat.format(date) + " = "
//                    + displayFormat.format(date));
            str = displayFormat.format(date);
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        return str;
    }


    public static String convertDelDate(String time) {
        String str = "";
        try {
            SimpleDateFormat displayFormat = new SimpleDateFormat("hh:mm a  dd MMM yyyy");
            SimpleDateFormat parseFormat = new SimpleDateFormat("dd-MM-yyyy hh:mm a");
            Date date = parseFormat.parse(time);
//            System.out.println(parseFormat.format(date) + " = "
//                    + displayFormat.format(date));
            str = displayFormat.format(date);
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        return str;
    }


    public static String dateDDMMYYYY(Date date) {
        String str = "";
        try {
            SimpleDateFormat displayFormat = new SimpleDateFormat("dd-MM-yyyy hh:mm a");

            str = displayFormat.format(date);
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        return str;
    }


    public static String convertDeliveryDate(String time) {
        String str = "";
        try {
            SimpleDateFormat parseFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); //2016-04-08 07:07:29
            SimpleDateFormat displayFormat = new SimpleDateFormat("hh:mm a  dd MMM yyyy");
            Date date = parseFormat.parse(time);
//            System.out.println(parseFormat.format(date) + " = "
//                    + displayFormat.format(date));
            str = displayFormat.format(date);
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        return str;
    }
    public static String convertholidayDate(String time) {
        String str = "";
        try {
            SimpleDateFormat displayFormat = new SimpleDateFormat("hh:mm a  dd MMM yyyy");
            SimpleDateFormat parseFormat = new SimpleDateFormat("dd-MMM-yyyy");
            Date date = parseFormat.parse(time);
//            System.out.println(parseFormat.format(date) + " = "
//                    + displayFormat.format(date));
            str = displayFormat.format(date);
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        return str;
    }

    public static String convertDates(String time) {
        String str = "";
        try {
            SimpleDateFormat displayFormat = new SimpleDateFormat("hh:mm a  dd MMM yyyy");
            SimpleDateFormat parseFormat = new SimpleDateFormat("dd-MMM-yyyy");
            Date date = parseFormat.parse(time);
//            System.out.println(parseFormat.format(date) + " = "
//                    + displayFormat.format(date));
            str = displayFormat.format(date);
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }
        return str;
    }





    // Get Content URL
    public static String getPath(final Context context, final Uri uri)
    {
        final boolean isKitKatOrAbove = Build.VERSION.SDK_INT >=  Build.VERSION_CODES.KITKAT;

        // DocumentProvider
        if (isKitKatOrAbove && DocumentsContract.isDocumentUri(context, uri)) {
            // ExternalStorageProvider
            if (isExternalStorageDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split(":");
                final String type = split[0];

                if ("primary".equalsIgnoreCase(type)) {
                    return Environment.getExternalStorageDirectory() + "/" + split[1];
                }

                // TODO handle non-primary volumes
            }
            // DownloadsProvider
            else if (isDownloadsDocument(uri)) {

                final String id = DocumentsContract.getDocumentId(uri);
                final Uri contentUri = ContentUris.withAppendedId(
                        Uri.parse("content://downloads/public_downloads"), Long.valueOf(id));

                return getDataColumn(context, contentUri, null, null);
            }
            // MediaProvider
            else if (isMediaDocument(uri)) {
                final String docId = DocumentsContract.getDocumentId(uri);
                final String[] split = docId.split(":");
                final String type = split[0];

                Uri contentUri = null;
                if ("image".equals(type)) {
                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                } else if ("video".equals(type)) {
                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                } else if ("audio".equals(type)) {
                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                }

                final String selection = "_id=?";
                final String[] selectionArgs = new String[] {
                        split[1]
                };

                return getDataColumn(context, contentUri, selection, selectionArgs);
            }
        }
        // MediaStore (and general)
        else if ("content".equalsIgnoreCase(uri.getScheme())) {
            return getDataColumn(context, uri, null, null);
        }
        // File
        else if ("file".equalsIgnoreCase(uri.getScheme())) {
            return uri.getPath();
        }

        return null;
    }

    /**
     * Get the value of the data column for this Uri. This is useful for
     * MediaStore Uris, and other file-based ContentProviders.
     *
     * @param context The context.
     * @param uri The Uri to query.
     * @param selection (Optional) Filter used in the query.
     * @param selectionArgs (Optional) Selection arguments used in the query.
     * @return The value of the _data column, which is typically a file path.
     */
    public static String getDataColumn(Context context, Uri uri, String selection,
                                       String[] selectionArgs) {

        Cursor cursor = null;
        final String column = "_data";
        final String[] projection = {
                column
        };

        try {
            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,
                    null);
            if (cursor != null && cursor.moveToFirst()) {
                final int column_index = cursor.getColumnIndexOrThrow(column);
                return cursor.getString(column_index);
            }
        } finally {
            if (cursor != null)
                cursor.close();
        }
        return null;
    }


    /**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is ExternalStorageProvider.
     */
    public static boolean isExternalStorageDocument(Uri uri) {
        return "com.android.externalstorage.documents".equals(uri.getAuthority());
    }

    /**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is DownloadsProvider.
     */
    public static boolean isDownloadsDocument(Uri uri) {
        return "com.android.providers.downloads.documents".equals(uri.getAuthority());
    }

    /**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is MediaProvider.
     */
    public static boolean isMediaDocument(Uri uri) {
        return "com.android.providers.media.documents".equals(uri.getAuthority());
    }


}
